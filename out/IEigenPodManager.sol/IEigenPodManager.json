{"abi":[{"type":"function","name":"addShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"beaconChainETHStrategy","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStrategy"}],"stateMutability":"view"},{"type":"function","name":"beaconChainSlashingFactor","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"burnableETHShares","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"createPod","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"eigenPodBeacon","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IBeacon"}],"stateMutability":"view"},{"type":"function","name":"ethPOS","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IETHPOSDeposit"}],"stateMutability":"view"},{"type":"function","name":"getPod","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"contract IEigenPod"}],"stateMutability":"view"},{"type":"function","name":"hasPod","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"increaseBurnOrRedistributableShares","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]},{"name":"slashId","type":"uint256","internalType":"uint256"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"addedSharesToBurn","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"numPods","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ownerToPod","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"contract IEigenPod"}],"stateMutability":"view"},{"type":"function","name":"pause","inputs":[{"name":"newPausedStatus","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"pauseAll","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"paused","inputs":[{"name":"index","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"paused","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"pauserRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPauserRegistry"}],"stateMutability":"view"},{"type":"function","name":"pectraForkTimestamp","inputs":[],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"podOwnerDepositShares","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"recordBeaconChainETHBalanceUpdate","inputs":[{"name":"podOwner","type":"address","internalType":"address"},{"name":"prevRestakedBalanceWei","type":"uint256","internalType":"uint256"},{"name":"balanceDeltaWei","type":"int256","internalType":"int256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeDepositShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"depositSharesToRemove","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"setPectraForkTimestamp","inputs":[{"name":"timestamp","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setProofTimestampSetter","inputs":[{"name":"newProofTimestampSetter","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stake","inputs":[{"name":"pubkey","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"depositDataRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"stakerDepositShares","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"}],"outputs":[{"name":"depositShares","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"unpause","inputs":[{"name":"newPausedStatus","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"withdrawSharesAsTokens","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"BeaconChainETHDeposited","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BeaconChainETHWithdrawalCompleted","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"nonce","type":"uint96","indexed":false,"internalType":"uint96"},{"name":"delegatedAddress","type":"address","indexed":false,"internalType":"address"},{"name":"withdrawer","type":"address","indexed":false,"internalType":"address"},{"name":"withdrawalRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"BeaconChainSlashingFactorDecreased","inputs":[{"name":"staker","type":"address","indexed":false,"internalType":"address"},{"name":"prevBeaconChainSlashingFactor","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"newBeaconChainSlashingFactor","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"BurnableETHSharesIncreased","inputs":[{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"NewTotalShares","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newTotalShares","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"Paused","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"newPausedStatus","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PectraForkTimestampSet","inputs":[{"name":"newPectraForkTimestamp","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"PodDeployed","inputs":[{"name":"eigenPod","type":"address","indexed":true,"internalType":"address"},{"name":"podOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PodSharesUpdated","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"sharesDelta","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"ProofTimestampSetterSet","inputs":[{"name":"newProofTimestampSetter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Unpaused","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"newPausedStatus","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"CurrentlyPaused","inputs":[]},{"type":"error","name":"EigenPodAlreadyExists","inputs":[]},{"type":"error","name":"InputAddressZero","inputs":[]},{"type":"error","name":"InvalidNewPausedStatus","inputs":[]},{"type":"error","name":"InvalidStrategy","inputs":[]},{"type":"error","name":"LegacyWithdrawalsNotCompleted","inputs":[]},{"type":"error","name":"OnlyDelegationManager","inputs":[]},{"type":"error","name":"OnlyEigenPod","inputs":[]},{"type":"error","name":"OnlyPauser","inputs":[]},{"type":"error","name":"OnlyProofTimestampSetter","inputs":[]},{"type":"error","name":"OnlyUnpauser","inputs":[]},{"type":"error","name":"SharesNegative","inputs":[]},{"type":"error","name":"SharesNotMultipleOfGwei","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addShares(address,address,uint256)":"50ff7225","beaconChainETHStrategy()":"9104c319","beaconChainSlashingFactor(address)":"a3d75e09","burnableETHShares()":"f5d4fed3","createPod()":"84d81062","eigenPodBeacon()":"292b7b2b","ethPOS()":"74cdd798","getPod(address)":"a38406a3","hasPod(address)":"f6848d24","increaseBurnOrRedistributableShares((address,uint32),uint256,address,uint256)":"3fb99ca5","numPods()":"a6a509be","ownerToPod(address)":"9ba06275","pause(uint256)":"136439dd","pauseAll()":"595c6a67","paused()":"5c975abb","paused(uint8)":"5ac86ab7","pauserRegistry()":"886f1195","pectraForkTimestamp()":"2704351a","podOwnerDepositShares(address)":"d48e8894","recordBeaconChainETHBalanceUpdate(address,uint256,int256)":"a1ca780b","removeDepositShares(address,address,uint256)":"724af423","setPectraForkTimestamp(uint64)":"5a26fbf4","setProofTimestampSetter(address)":"0d1e9de1","stake(bytes,bytes,bytes32)":"9b4e4634","stakerDepositShares(address,address)":"fe243a17","unpause(uint256)":"fabc1cbc","version()":"54fd4d50","withdrawSharesAsTokens(address,address,address,uint256)":"2eae418c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CurrentlyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EigenPodAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewPausedStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LegacyWithdrawalsNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDelegationManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEigenPod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProofTimestampSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyUnpauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharesNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharesNotMultipleOfGwei\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeaconChainETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"BeaconChainETHWithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"prevBeaconChainSlashingFactor\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newBeaconChainSlashingFactor\",\"type\":\"uint64\"}],\"name\":\"BeaconChainSlashingFactorDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"BurnableETHSharesIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newTotalShares\",\"type\":\"int256\"}],\"name\":\"NewTotalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newPectraForkTimestamp\",\"type\":\"uint64\"}],\"name\":\"PectraForkTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eigenPod\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"PodDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"sharesDelta\",\"type\":\"int256\"}],\"name\":\"PodSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProofTimestampSetter\",\"type\":\"address\"}],\"name\":\"ProofTimestampSetterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"addShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconChainETHStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"beaconChainSlashingFactor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnableETHShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPodBeacon\",\"outputs\":[{\"internalType\":\"contract IBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPOS\",\"outputs\":[{\"internalType\":\"contract IETHPOSDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"getPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"hasPod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"slashId\",\"type\":\"uint256\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedSharesToBurn\",\"type\":\"uint256\"}],\"name\":\"increaseBurnOrRedistributableShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"ownerToPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pectraForkTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"podOwnerDepositShares\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevRestakedBalanceWei\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"balanceDeltaWei\",\"type\":\"int256\"}],\"name\":\"recordBeaconChainETHBalanceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositSharesToRemove\",\"type\":\"uint256\"}],\"name\":\"removeDepositShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"setPectraForkTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProofTimestampSetter\",\"type\":\"address\"}],\"name\":\"setProofTimestampSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"stakerDepositShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawSharesAsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"errors\":{\"CurrentlyPaused()\":[{\"details\":\"Thrown when currently paused.\"}],\"EigenPodAlreadyExists()\":[{\"details\":\"Thrown when caller already has an EigenPod.\"}],\"InputAddressZero()\":[{\"details\":\"Thrown when a null address input is provided.\"}],\"InvalidNewPausedStatus()\":[{\"details\":\"Thrown when invalid `newPausedStatus` is provided.\"}],\"InvalidStrategy()\":[{\"details\":\"Thrown when the strategy is not the beaconChainETH strategy.\"}],\"LegacyWithdrawalsNotCompleted()\":[{\"details\":\"Thrown when the pods shares are negative and a beacon chain balance update is attempted. The podOwner should complete legacy withdrawal first.\"}],\"OnlyDelegationManager()\":[{\"details\":\"Thrown when caller is not DelegationManager.\"}],\"OnlyEigenPod()\":[{\"details\":\"Thrown when caller is not a EigenPod.\"}],\"OnlyPauser()\":[{\"details\":\"Thrown when caller is not pauser.\"}],\"OnlyProofTimestampSetter()\":[{\"details\":\"Thrown when caller is not the proof timestamp setter\"}],\"OnlyUnpauser()\":[{\"details\":\"Thrown when caller is not unpauser.\"}],\"SharesNegative()\":[{\"details\":\"Thrown when shares would result in a negative integer.\"}],\"SharesNotMultipleOfGwei()\":[{\"details\":\"Thrown when shares is not a multiple of gwei.\"}]},\"kind\":\"dev\",\"methods\":{\"addShares(address,address,uint256)\":{\"details\":\"strategy must be beaconChainETH when talking to the EigenPodManager\",\"returns\":{\"_0\":\"existingDepositShares the shares the staker had before any were added\",\"_1\":\"addedShares the new shares added to the staker's balance\"}},\"createPod()\":{\"details\":\"Function will revert if the `msg.sender` already has an EigenPod.Returns EigenPod address\"},\"increaseBurnOrRedistributableShares((address,uint32),uint256,address,uint256)\":{\"details\":\"This function is only called by the DelegationManager when an operator is slashed.\",\"params\":{\"addedSharesToBurn\":\"The amount of added shares to burn.\",\"operatorSet\":\"The operator set to burn shares in.\",\"slashId\":\"The slash id to burn shares in.\",\"strategy\":\"The strategy to burn shares in.\"}},\"pause(uint256)\":{\"details\":\"This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"pectraForkTimestamp()\":{\"details\":\"Specifically, this returns the timestamp of the first non-missed slot at or after the Pectra hard fork\"},\"podOwnerDepositShares(address)\":{\"details\":\"The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can decrease between the pod owner queuing and completing a withdrawal. When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_. Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this as the withdrawal \\\"paying off the deficit\\\".\"},\"recordBeaconChainETHBalanceUpdate(address,uint256,int256)\":{\"details\":\"Callable only by the podOwner's EigenPod contract.Reverts if `sharesDelta` is not a whole Gwei amount\",\"params\":{\"balanceDeltaWei\":\"is the amount the balance changed\",\"podOwner\":\"is the pod owner whose balance is being updated.\",\"prevRestakedBalanceWei\":\"is the total amount restaked through the pod before the balance update, including any amount currently in the withdrawal queue.\"}},\"removeDepositShares(address,address,uint256)\":{\"details\":\"strategy must be beaconChainETH when talking to the EigenPodManager\",\"returns\":{\"_0\":\"updatedShares the staker's deposit shares after decrement\"}},\"stake(bytes,bytes,bytes32)\":{\"params\":{\"depositDataRoot\":\"The root/hash of the deposit data for the validator's deposit.\",\"pubkey\":\"The 48 bytes public key of the beacon chain validator.\",\"signature\":\"The validator's signature of the deposit data.\"}},\"stakerDepositShares(address,address)\":{\"details\":\"strategy must be beaconChainETH when talking to the EigenPodManagerreturns 0 if the user has negative shares\"},\"unpause(uint256)\":{\"details\":\"This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"version()\":{\"returns\":{\"_0\":\"The version string in SemVer format (e.g., \\\"1.1.1\\\")\"}},\"withdrawSharesAsTokens(address,address,address,uint256)\":{\"details\":\"strategy must be beaconChainETH when talking to the EigenPodManagertoken is not validated when talking to the EigenPodManager\"}},\"title\":\"Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\",\"version\":1},\"userdoc\":{\"events\":{\"BeaconChainETHDeposited(address,uint256)\":{\"notice\":\"Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\"},\"BeaconChainETHWithdrawalCompleted(address,uint256,uint96,address,address,bytes32)\":{\"notice\":\"Emitted when a withdrawal of beacon chain ETH is completed\"},\"BeaconChainSlashingFactorDecreased(address,uint64,uint64)\":{\"notice\":\"Emitted when a staker's beaconChainSlashingFactor is updated\"},\"BurnableETHSharesIncreased(uint256)\":{\"notice\":\"Emitted when an operator is slashed and shares to be burned are increased\"},\"NewTotalShares(address,int256)\":{\"notice\":\"Emitted every time the total shares of a pod are updated\"},\"Paused(address,uint256)\":{\"notice\":\"Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\"},\"PectraForkTimestampSet(uint64)\":{\"notice\":\"Emitted when the Pectra fork timestamp is updated\"},\"PodDeployed(address,address)\":{\"notice\":\"Emitted to notify the deployment of an EigenPod\"},\"PodSharesUpdated(address,int256)\":{\"notice\":\"Emitted when the balance of an EigenPod is updated\"},\"ProofTimestampSetterSet(address)\":{\"notice\":\"Emitted when the proof timestamp setter is updated\"},\"Unpaused(address,uint256)\":{\"notice\":\"Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\"}},\"kind\":\"user\",\"methods\":{\"addShares(address,address,uint256)\":{\"notice\":\"Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\"},\"beaconChainETHStrategy()\":{\"notice\":\"returns canonical, virtual beaconChainETH strategy\"},\"beaconChainSlashingFactor(address)\":{\"notice\":\"Returns the historical sum of proportional balance decreases a pod owner has experienced when updating their pod's balance.\"},\"burnableETHShares()\":{\"notice\":\"Returns the accumulated amount of beacon chain ETH Strategy shares\"},\"createPod()\":{\"notice\":\"Creates an EigenPod for the sender.\"},\"eigenPodBeacon()\":{\"notice\":\"Beacon proxy to which the EigenPods point\"},\"ethPOS()\":{\"notice\":\"The ETH2 Deposit Contract\"},\"getPod(address)\":{\"notice\":\"Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\"},\"hasPod(address)\":{\"notice\":\"Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\"},\"increaseBurnOrRedistributableShares((address,uint32),uint256,address,uint256)\":{\"notice\":\"Increase the amount of burnable/redistributable shares for a given Strategy. This is called by the DelegationManager when an operator is slashed in EigenLayer.\"},\"numPods()\":{\"notice\":\"Returns the number of EigenPods that have been created\"},\"ownerToPod(address)\":{\"notice\":\"Returns the address of the `podOwner`'s EigenPod if it has been deployed.\"},\"pause(uint256)\":{\"notice\":\"This function is used to pause an EigenLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\"},\"pauseAll()\":{\"notice\":\"Alias for `pause(type(uint256).max)`.\"},\"paused()\":{\"notice\":\"Returns the current paused status as a uint256.\"},\"paused(uint8)\":{\"notice\":\"Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\"},\"pauserRegistry()\":{\"notice\":\"Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\"},\"pectraForkTimestamp()\":{\"notice\":\"Returns the timestamp of the Pectra hard fork\"},\"podOwnerDepositShares(address)\":{\"notice\":\"Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\"},\"recordBeaconChainETHBalanceUpdate(address,uint256,int256)\":{\"notice\":\"Adds any positive share delta to the pod owner's deposit shares, and delegates them to the pod owner's operator (if applicable). A negative share delta does NOT impact the pod owner's deposit shares, but will reduce their beacon chain slashing factor and delegated shares accordingly.\"},\"removeDepositShares(address,address,uint256)\":{\"notice\":\"Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\"},\"setPectraForkTimestamp(uint64)\":{\"notice\":\"Sets the Pectra fork timestamp, only callable by `proofTimestampSetter`\"},\"setProofTimestampSetter(address)\":{\"notice\":\"Sets the address that can set proof timestamps\"},\"stake(bytes,bytes,bytes32)\":{\"notice\":\"Stakes for a new beacon chain validator on the sender's EigenPod. Also creates an EigenPod for the sender if they don't have one already.\"},\"stakerDepositShares(address,address)\":{\"notice\":\"Returns the current shares of `user` in `strategy`\"},\"unpause(uint256)\":{\"notice\":\"This function is used to unpause an EigenLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\"},\"version()\":{\"notice\":\"Returns the semantic version string of the contract.\"},\"withdrawSharesAsTokens(address,address,address,uint256)\":{\"notice\":\"Used by the DelegationManager to convert deposit shares to tokens and send them to a staker\"}},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol\":\"IEigenPodManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":cofhe-contracts/=lib/cofhe-contracts/contracts/\",\":ds-test/=lib/eigenlayer-contracts/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-contracts/src/contracts/\",\":erc4626-tests/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/v4-core/node_modules/hardhat/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/v4-core/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":solmate/=lib/solmate/src/\",\":v4-core/=lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/src/\",\":zeus-templates/=lib/eigenlayer-contracts/lib/zeus-templates/src/\"]},\"sources\":{\"lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c\",\"dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis\"]},\"lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xb1ef3d6c53eb535f01fb07c8f0247f8b3f9d31a88e5f397c8074363c73251f0f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://f3cab7243290d74aaf382ee5e8c820f4a2dab99841fa7d48ff13c01a5a2f7cc3\",\"dweb:/ipfs/QmXq16ZQwHijHSFbcA54vniRBkn7z7WMmAQ6nSDQzhSirF\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol\":{\"keccak256\":\"0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91\",\"dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol\":{\"keccak256\":\"0x4314fae1b00d8d585948a9d9fd219a9c99674b50c46c199a453c6b84333c93ee\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://97a55954bc0ff943e417ac0df393f999d77360d3d00882fb53ce251c18fa9f4c\",\"dweb:/ipfs/Qmbv1X1xRuaLxftWcG14giVWicoiYzpcu12fDsTp9qoK1z\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol\":{\"keccak256\":\"0xa2e18dbfd63c3211158f916b669bd74066388564a2f019e952953bc5390e1466\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c86e9d4426aa20892ffc660793e8ce6e881de02cc6a0b483efaa06f14a7df864\",\"dweb:/ipfs/QmQbvkto6g9EeRMfU4bPcuAh1Tz3ohGFpHyHS8GA8mZiFN\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol\":{\"keccak256\":\"0x0404f1db44005929899e00dcc50d553175951ff26c215c87215bbd92b4ebfde3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cdb88bff60663f3418d271c7db93c2867d767e31ec592690e7b2e1f1ba1589e8\",\"dweb:/ipfs/QmQfsZCiEqWYEFopZB5LvL9pq47Qba9EeMzeZcHN2e9ypc\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\":{\"keccak256\":\"0x705c371129ac08b9b035c1c1a1572a5e3a61b48dda8b7d8d974a7bfb88ecb7fc\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://bdb894c26fcf1b83024d006b0573663286e50d857c5dea89a9149552a971da72\",\"dweb:/ipfs/QmdqWnSPmeF9mV96uWMSN8AhVi64U818GRwFEqr6dP3UMD\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/ISemVerMixin.sol\":{\"keccak256\":\"0xa7cfe506856653310b402b73baca96af947897c02b5b35a310640443e1332791\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e23941c3b825e02e3521dbbae63c5b58fb48d17125669fc0cd3c8d5a8c272d6e\",\"dweb:/ipfs/QmaPfH8XkpT1nsEdJe34YbQCwBf1Gq89EvUPvG1wPforZa\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IShareManager.sol\":{\"keccak256\":\"0x411d30d9408ec9302c66e4485069e9c822de2360929edfddc8b644b61b1b3346\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://9e9b998ae71f0de2282a4b5969f99dfb26e9a7a00df9f21e836f6515071da482\",\"dweb:/ipfs/QmXCkEJ55TV42m8Wf8Wi7muepd1LJsqmj6ckkRMr47CNvq\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtilsMixin.sol\":{\"keccak256\":\"0x5223940241400e601b40ef9b544569262aa96cd9b05efd41fdaa4eb815d1b95b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c993c65dbb74ecf6428aa73535a01a5663f4f4f536611e070b2e78937c19af10\",\"dweb:/ipfs/QmaDsP63uGvoXjrGPYtbcZyUPEEspq9QChZeP1BYrn6FcE\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0xabf10614af348e518e14b29de1ae88d79a2567b705edba118f2bf1ce28bd90b5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://af2f7e00fe655b10402be84898ef83cdb5a6f8e3d466513f3fce71554782dc9e\",\"dweb:/ipfs/QmbQsEFf2Mgxuv75HVssgeFeprAbdFnwjWbAWd8Wn9ETXe\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol\":{\"keccak256\":\"0x11f098af7dd67c9b9b5ecdb737a1a2e6542f24c5635717dff4461d8bf1be50a0\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3adfc1635cf03ea1f85136196486b031e5bf2d8444a30c74d8ad70b9160a0525\",\"dweb:/ipfs/QmXVtK5Cicu4U2fiSGL3iEFSnXiRX7EzA7zHp2hsnpNJiH\"]},\"lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol\":{\"keccak256\":\"0x34e826f1bf623fdf06e838dcfae454bd0998c6bd1f59472bdd23a654c7f0382b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://9e29ad715a58f94ca25d66d145a688e864ba8ead40d526c43c4fe56a03b00acb\",\"dweb:/ipfs/QmfSjncaRmF75JCZ3Mynrfd2LKpE65zWmwFUyYyhhScvX3\"]},\"lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol\":{\"keccak256\":\"0xe8ec0e6bef36311170e2447bdd2fe8b19aad7244024926243428ffe02754b136\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a628118c581ef8393ff09e50d0db45470bed040c45ed463f71144ef344fee48e\",\"dweb:/ipfs/QmUz7nTJfzXKL2Sy175LPHNeUfKFHGarWvJFeCG4ZBqRuX\"]},\"lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol\":{\"keccak256\":\"0xf6ef9925d5a6db7de81efac1e85b2a4ec64249abc13d4a2ff3ff73e41c8df436\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d3e5dc3ef9a117ac18ac2c0371d34b948d3e1e93c0eba6dbb7a75a1e15abfc6\",\"dweb:/ipfs/QmT4PrXoTJpnTNUxvXk3r4tzrfzSUYg4Lr2GyWNWeVXhAk\"]},\"lib/eigenlayer-contracts/src/contracts/libraries/OperatorSetLib.sol\":{\"keccak256\":\"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41\",\"dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx\"]},\"lib/eigenlayer-contracts/src/contracts/libraries/SlashingLib.sol\":{\"keccak256\":\"0x65cdf662fb8842bcd8296d37e0ffb8e3f319645538f7031bf92288c36c21a469\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://18cf145d9bf509c85b148400e83e689dff62d47508121f1f78db5bed3ace5add\",\"dweb:/ipfs/QmZiso1MD1JtCVkBgVC7zy4gZ598bNt2re9YGkF5JfAM6L\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"CurrentlyPaused"},{"inputs":[],"type":"error","name":"EigenPodAlreadyExists"},{"inputs":[],"type":"error","name":"InputAddressZero"},{"inputs":[],"type":"error","name":"InvalidNewPausedStatus"},{"inputs":[],"type":"error","name":"InvalidStrategy"},{"inputs":[],"type":"error","name":"LegacyWithdrawalsNotCompleted"},{"inputs":[],"type":"error","name":"OnlyDelegationManager"},{"inputs":[],"type":"error","name":"OnlyEigenPod"},{"inputs":[],"type":"error","name":"OnlyPauser"},{"inputs":[],"type":"error","name":"OnlyProofTimestampSetter"},{"inputs":[],"type":"error","name":"OnlyUnpauser"},{"inputs":[],"type":"error","name":"SharesNegative"},{"inputs":[],"type":"error","name":"SharesNotMultipleOfGwei"},{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"BeaconChainETHDeposited","anonymous":false},{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"uint256","name":"shares","type":"uint256","indexed":false},{"internalType":"uint96","name":"nonce","type":"uint96","indexed":false},{"internalType":"address","name":"delegatedAddress","type":"address","indexed":false},{"internalType":"address","name":"withdrawer","type":"address","indexed":false},{"internalType":"bytes32","name":"withdrawalRoot","type":"bytes32","indexed":false}],"type":"event","name":"BeaconChainETHWithdrawalCompleted","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":false},{"internalType":"uint64","name":"prevBeaconChainSlashingFactor","type":"uint64","indexed":false},{"internalType":"uint64","name":"newBeaconChainSlashingFactor","type":"uint64","indexed":false}],"type":"event","name":"BeaconChainSlashingFactorDecreased","anonymous":false},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256","indexed":false}],"type":"event","name":"BurnableETHSharesIncreased","anonymous":false},{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"int256","name":"newTotalShares","type":"int256","indexed":false}],"type":"event","name":"NewTotalShares","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"uint256","name":"newPausedStatus","type":"uint256","indexed":false}],"type":"event","name":"Paused","anonymous":false},{"inputs":[{"internalType":"uint64","name":"newPectraForkTimestamp","type":"uint64","indexed":false}],"type":"event","name":"PectraForkTimestampSet","anonymous":false},{"inputs":[{"internalType":"address","name":"eigenPod","type":"address","indexed":true},{"internalType":"address","name":"podOwner","type":"address","indexed":true}],"type":"event","name":"PodDeployed","anonymous":false},{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"int256","name":"sharesDelta","type":"int256","indexed":false}],"type":"event","name":"PodSharesUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"newProofTimestampSetter","type":"address","indexed":false}],"type":"event","name":"ProofTimestampSetterSet","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"uint256","name":"newPausedStatus","type":"uint256","indexed":false}],"type":"event","name":"Unpaused","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"beaconChainETHStrategy","outputs":[{"internalType":"contract IStrategy","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"beaconChainSlashingFactor","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"burnableETHShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"createPod","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"eigenPodBeacon","outputs":[{"internalType":"contract IBeacon","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"ethPOS","outputs":[{"internalType":"contract IETHPOSDeposit","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"getPod","outputs":[{"internalType":"contract IEigenPod","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"hasPod","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]},{"internalType":"uint256","name":"slashId","type":"uint256"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"addedSharesToBurn","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"increaseBurnOrRedistributableShares"},{"inputs":[],"stateMutability":"view","type":"function","name":"numPods","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"ownerToPod","outputs":[{"internalType":"contract IEigenPod","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"newPausedStatus","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"pause"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pauseAll"},{"inputs":[{"internalType":"uint8","name":"index","type":"uint8"}],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pauserRegistry","outputs":[{"internalType":"contract IPauserRegistry","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pectraForkTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"podOwnerDepositShares","outputs":[{"internalType":"int256","name":"","type":"int256"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"},{"internalType":"uint256","name":"prevRestakedBalanceWei","type":"uint256"},{"internalType":"int256","name":"balanceDeltaWei","type":"int256"}],"stateMutability":"nonpayable","type":"function","name":"recordBeaconChainETHBalanceUpdate"},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"depositSharesToRemove","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"removeDepositShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint64","name":"timestamp","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"setPectraForkTimestamp"},{"inputs":[{"internalType":"address","name":"newProofTimestampSetter","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setProofTimestampSetter"},{"inputs":[{"internalType":"bytes","name":"pubkey","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32","name":"depositDataRoot","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"stake"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"}],"stateMutability":"view","type":"function","name":"stakerDepositShares","outputs":[{"internalType":"uint256","name":"depositShares","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"newPausedStatus","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"unpause"},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdrawSharesAsTokens"}],"devdoc":{"kind":"dev","methods":{"addShares(address,address,uint256)":{"details":"strategy must be beaconChainETH when talking to the EigenPodManager","returns":{"_0":"existingDepositShares the shares the staker had before any were added","_1":"addedShares the new shares added to the staker's balance"}},"createPod()":{"details":"Function will revert if the `msg.sender` already has an EigenPod.Returns EigenPod address"},"increaseBurnOrRedistributableShares((address,uint32),uint256,address,uint256)":{"details":"This function is only called by the DelegationManager when an operator is slashed.","params":{"addedSharesToBurn":"The amount of added shares to burn.","operatorSet":"The operator set to burn shares in.","slashId":"The slash id to burn shares in.","strategy":"The strategy to burn shares in."}},"pause(uint256)":{"details":"This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.","params":{"newPausedStatus":"represents the new value for `_paused` to take, which means it may flip several bits at once."}},"pectraForkTimestamp()":{"details":"Specifically, this returns the timestamp of the first non-missed slot at or after the Pectra hard fork"},"podOwnerDepositShares(address)":{"details":"The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can decrease between the pod owner queuing and completing a withdrawal. When the pod owner's shares would otherwise increase, this \"deficit\" is decreased first _instead_. Likewise, when a withdrawal is completed, this \"deficit\" is decreased and the withdrawal amount is decreased; We can think of this as the withdrawal \"paying off the deficit\"."},"recordBeaconChainETHBalanceUpdate(address,uint256,int256)":{"details":"Callable only by the podOwner's EigenPod contract.Reverts if `sharesDelta` is not a whole Gwei amount","params":{"balanceDeltaWei":"is the amount the balance changed","podOwner":"is the pod owner whose balance is being updated.","prevRestakedBalanceWei":"is the total amount restaked through the pod before the balance update, including any amount currently in the withdrawal queue."}},"removeDepositShares(address,address,uint256)":{"details":"strategy must be beaconChainETH when talking to the EigenPodManager","returns":{"_0":"updatedShares the staker's deposit shares after decrement"}},"stake(bytes,bytes,bytes32)":{"params":{"depositDataRoot":"The root/hash of the deposit data for the validator's deposit.","pubkey":"The 48 bytes public key of the beacon chain validator.","signature":"The validator's signature of the deposit data."}},"stakerDepositShares(address,address)":{"details":"strategy must be beaconChainETH when talking to the EigenPodManagerreturns 0 if the user has negative shares"},"unpause(uint256)":{"details":"This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.","params":{"newPausedStatus":"represents the new value for `_paused` to take, which means it may flip several bits at once."}},"version()":{"returns":{"_0":"The version string in SemVer format (e.g., \"1.1.1\")"}},"withdrawSharesAsTokens(address,address,address,uint256)":{"details":"strategy must be beaconChainETH when talking to the EigenPodManagertoken is not validated when talking to the EigenPodManager"}},"version":1},"userdoc":{"kind":"user","methods":{"addShares(address,address,uint256)":{"notice":"Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue"},"beaconChainETHStrategy()":{"notice":"returns canonical, virtual beaconChainETH strategy"},"beaconChainSlashingFactor(address)":{"notice":"Returns the historical sum of proportional balance decreases a pod owner has experienced when updating their pod's balance."},"burnableETHShares()":{"notice":"Returns the accumulated amount of beacon chain ETH Strategy shares"},"createPod()":{"notice":"Creates an EigenPod for the sender."},"eigenPodBeacon()":{"notice":"Beacon proxy to which the EigenPods point"},"ethPOS()":{"notice":"The ETH2 Deposit Contract"},"getPod(address)":{"notice":"Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not)."},"hasPod(address)":{"notice":"Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise."},"increaseBurnOrRedistributableShares((address,uint32),uint256,address,uint256)":{"notice":"Increase the amount of burnable/redistributable shares for a given Strategy. This is called by the DelegationManager when an operator is slashed in EigenLayer."},"numPods()":{"notice":"Returns the number of EigenPods that have been created"},"ownerToPod(address)":{"notice":"Returns the address of the `podOwner`'s EigenPod if it has been deployed."},"pause(uint256)":{"notice":"This function is used to pause an EigenLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig."},"pauseAll()":{"notice":"Alias for `pause(type(uint256).max)`."},"paused()":{"notice":"Returns the current paused status as a uint256."},"paused(uint8)":{"notice":"Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise"},"pauserRegistry()":{"notice":"Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing)."},"pectraForkTimestamp()":{"notice":"Returns the timestamp of the Pectra hard fork"},"podOwnerDepositShares(address)":{"notice":"Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy."},"recordBeaconChainETHBalanceUpdate(address,uint256,int256)":{"notice":"Adds any positive share delta to the pod owner's deposit shares, and delegates them to the pod owner's operator (if applicable). A negative share delta does NOT impact the pod owner's deposit shares, but will reduce their beacon chain slashing factor and delegated shares accordingly."},"removeDepositShares(address,address,uint256)":{"notice":"Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue"},"setPectraForkTimestamp(uint64)":{"notice":"Sets the Pectra fork timestamp, only callable by `proofTimestampSetter`"},"setProofTimestampSetter(address)":{"notice":"Sets the address that can set proof timestamps"},"stake(bytes,bytes,bytes32)":{"notice":"Stakes for a new beacon chain validator on the sender's EigenPod. Also creates an EigenPod for the sender if they don't have one already."},"stakerDepositShares(address,address)":{"notice":"Returns the current shares of `user` in `strategy`"},"unpause(uint256)":{"notice":"This function is used to unpause an EigenLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract."},"version()":{"notice":"Returns the semantic version string of the contract."},"withdrawSharesAsTokens(address,address,address,uint256)":{"notice":"Used by the DelegationManager to convert deposit shares to tokens and send them to a staker"}},"version":1}},"settings":{"remappings":["@ensdomains/=lib/v4-core/node_modules/@ensdomains/","@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","cofhe-contracts/=lib/cofhe-contracts/contracts/","ds-test/=lib/eigenlayer-contracts/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-contracts/src/contracts/","erc4626-tests/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","hardhat/=lib/v4-core/node_modules/hardhat/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/v4-core/lib/openzeppelin-contracts/","openzeppelin/=lib/v4-core/lib/openzeppelin-contracts/contracts/","permit2/=lib/v4-periphery/lib/permit2/","solmate/=lib/solmate/src/","v4-core/=lib/v4-core/src/","v4-periphery/=lib/v4-periphery/src/","zeus-templates/=lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol":"IEigenPodManager"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/SafeCastUpgradeable.sol":{"keccak256":"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b","urls":["bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c","dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis"],"license":"MIT"},"lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/proxy/beacon/IBeacon.sol":{"keccak256":"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61","urls":["bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354","dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"],"license":"MIT"},"lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"},"lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/utils/math/Math.sol":{"keccak256":"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3","urls":["bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c","dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"],"license":"MIT"},"lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"keccak256":"0xb1ef3d6c53eb535f01fb07c8f0247f8b3f9d31a88e5f397c8074363c73251f0f","urls":["bzz-raw://f3cab7243290d74aaf382ee5e8c820f4a2dab99841fa7d48ff13c01a5a2f7cc3","dweb:/ipfs/QmXq16ZQwHijHSFbcA54vniRBkn7z7WMmAQ6nSDQzhSirF"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol":{"keccak256":"0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c","urls":["bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91","dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz"],"license":"CC0-1.0"},"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol":{"keccak256":"0x4314fae1b00d8d585948a9d9fd219a9c99674b50c46c199a453c6b84333c93ee","urls":["bzz-raw://97a55954bc0ff943e417ac0df393f999d77360d3d00882fb53ce251c18fa9f4c","dweb:/ipfs/Qmbv1X1xRuaLxftWcG14giVWicoiYzpcu12fDsTp9qoK1z"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol":{"keccak256":"0xa2e18dbfd63c3211158f916b669bd74066388564a2f019e952953bc5390e1466","urls":["bzz-raw://c86e9d4426aa20892ffc660793e8ce6e881de02cc6a0b483efaa06f14a7df864","dweb:/ipfs/QmQbvkto6g9EeRMfU4bPcuAh1Tz3ohGFpHyHS8GA8mZiFN"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol":{"keccak256":"0x0404f1db44005929899e00dcc50d553175951ff26c215c87215bbd92b4ebfde3","urls":["bzz-raw://cdb88bff60663f3418d271c7db93c2867d767e31ec592690e7b2e1f1ba1589e8","dweb:/ipfs/QmQfsZCiEqWYEFopZB5LvL9pq47Qba9EeMzeZcHN2e9ypc"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol":{"keccak256":"0x705c371129ac08b9b035c1c1a1572a5e3a61b48dda8b7d8d974a7bfb88ecb7fc","urls":["bzz-raw://bdb894c26fcf1b83024d006b0573663286e50d857c5dea89a9149552a971da72","dweb:/ipfs/QmdqWnSPmeF9mV96uWMSN8AhVi64U818GRwFEqr6dP3UMD"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/ISemVerMixin.sol":{"keccak256":"0xa7cfe506856653310b402b73baca96af947897c02b5b35a310640443e1332791","urls":["bzz-raw://e23941c3b825e02e3521dbbae63c5b58fb48d17125669fc0cd3c8d5a8c272d6e","dweb:/ipfs/QmaPfH8XkpT1nsEdJe34YbQCwBf1Gq89EvUPvG1wPforZa"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IShareManager.sol":{"keccak256":"0x411d30d9408ec9302c66e4485069e9c822de2360929edfddc8b644b61b1b3346","urls":["bzz-raw://9e9b998ae71f0de2282a4b5969f99dfb26e9a7a00df9f21e836f6515071da482","dweb:/ipfs/QmXCkEJ55TV42m8Wf8Wi7muepd1LJsqmj6ckkRMr47CNvq"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtilsMixin.sol":{"keccak256":"0x5223940241400e601b40ef9b544569262aa96cd9b05efd41fdaa4eb815d1b95b","urls":["bzz-raw://c993c65dbb74ecf6428aa73535a01a5663f4f4f536611e070b2e78937c19af10","dweb:/ipfs/QmaDsP63uGvoXjrGPYtbcZyUPEEspq9QChZeP1BYrn6FcE"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"keccak256":"0xabf10614af348e518e14b29de1ae88d79a2567b705edba118f2bf1ce28bd90b5","urls":["bzz-raw://af2f7e00fe655b10402be84898ef83cdb5a6f8e3d466513f3fce71554782dc9e","dweb:/ipfs/QmbQsEFf2Mgxuv75HVssgeFeprAbdFnwjWbAWd8Wn9ETXe"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol":{"keccak256":"0x11f098af7dd67c9b9b5ecdb737a1a2e6542f24c5635717dff4461d8bf1be50a0","urls":["bzz-raw://3adfc1635cf03ea1f85136196486b031e5bf2d8444a30c74d8ad70b9160a0525","dweb:/ipfs/QmXVtK5Cicu4U2fiSGL3iEFSnXiRX7EzA7zHp2hsnpNJiH"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol":{"keccak256":"0x34e826f1bf623fdf06e838dcfae454bd0998c6bd1f59472bdd23a654c7f0382b","urls":["bzz-raw://9e29ad715a58f94ca25d66d145a688e864ba8ead40d526c43c4fe56a03b00acb","dweb:/ipfs/QmfSjncaRmF75JCZ3Mynrfd2LKpE65zWmwFUyYyhhScvX3"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol":{"keccak256":"0xe8ec0e6bef36311170e2447bdd2fe8b19aad7244024926243428ffe02754b136","urls":["bzz-raw://a628118c581ef8393ff09e50d0db45470bed040c45ed463f71144ef344fee48e","dweb:/ipfs/QmUz7nTJfzXKL2Sy175LPHNeUfKFHGarWvJFeCG4ZBqRuX"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol":{"keccak256":"0xf6ef9925d5a6db7de81efac1e85b2a4ec64249abc13d4a2ff3ff73e41c8df436","urls":["bzz-raw://2d3e5dc3ef9a117ac18ac2c0371d34b948d3e1e93c0eba6dbb7a75a1e15abfc6","dweb:/ipfs/QmT4PrXoTJpnTNUxvXk3r4tzrfzSUYg4Lr2GyWNWeVXhAk"],"license":"MIT"},"lib/eigenlayer-contracts/src/contracts/libraries/OperatorSetLib.sol":{"keccak256":"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812","urls":["bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41","dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/libraries/SlashingLib.sol":{"keccak256":"0x65cdf662fb8842bcd8296d37e0ffb8e3f319645538f7031bf92288c36c21a469","urls":["bzz-raw://18cf145d9bf509c85b148400e83e689dff62d47508121f1f78db5bed3ace5add","dweb:/ipfs/QmZiso1MD1JtCVkBgVC7zy4gZ598bNt2re9YGkF5JfAM6L"],"license":"BUSL-1.1"}},"version":1},"id":28}